---
// Projects Component

// Datos de proyectos de ejemplo (reemplaza con tus proyectos reales)
const projects = [
  {
    id: 1,
    title: "Detector de Emociones - IA en Tiempo Real",
    description: "Aplicación basada en FastAPI y DeepFace para detectar emociones humanas desde video en tiempo real. Dashboard con gráficas interactivas, análisis estadístico y despliegue en Docker con MongoDB Atlas.",
    image: "/projects/Emotion Detector.png",
    github: "https://github.com/LOAD-13/Emotion-Detector",
    liveDemo: "",
    tags: ["Python", "FastAPI", "DeepFace", "MongoDB", "Docker"]
  },
  {
    id: 2,
    title: "API REST Gestión de Biblioteca Digital",
    description: "API backend robusta para gestión de bibliotecas digitales con Spring Boot y PostgreSQL. Incluye autenticación JWT, búsqueda avanzada, sistema de roles y documentación con Swagger/OpenAPI integrada.",
    image: "/projects/Rest-API.png",
    github: "https://github.com/LOAD-13/REST-API-Library-Management",
    liveDemo: "https://api.jloadenegri.org/swagger-ui.html",
    tags: ["Java", "Spring Boot", "PostgreSQL", "JWT", "Swagger"]
  },
  {
    id: 3,
    title: "Trello Clone - Gestor de Proyectos Visual",
    description: "Clon completo de Trello con tableros, listas y tarjetas. Funcionalidad drag & drop, autenticación con Google OAuth y sincronización en tiempo real con Supabase. Interfaz moderna y responsive.",
    image: "/projects/Trello.png",
    github: "https://github.com/LOAD-13/Trello-Clone",
    liveDemo: "",
    tags: ["React", "TypeScript", "Supabase", "Tailwind CSS", "Vite"]
  },
  {
    id: 4,
    title: "Color Palette AI - Generador Inteligente",
    description: "Generador y evaluador de paletas de colores con IA Gemini. Extrae colores desde imágenes, evalúa armonía y accesibilidad. Exportación multi-formato: HEX, RGB, CSS Variables y Tailwind Config.",
    image: "/projects/Color Palette.png",
    github: "https://github.com/LOAD-13/Color-Palette-AI",
    liveDemo: "https://colors.jloadenegri.org",
    tags: ["Astro", "TypeScript", "Tailwind CSS", "Gemini AI"]
  },
  // Proyectos de relleno (pendientes)
  {
    id: 5,
    title: "Dashboard Analítico Empresarial",
    description: "Panel de control interactivo con visualización de métricas en tiempo real. Desarrollado con React y Python, incluye integración con MySQL y gráficas personalizadas para análisis de datos empresariales.",
    image: "/projects/project5.png",
    github: "https://github.com/LOAD-13/proyecto5",
    liveDemo: "",
    tags: ["React", "Python", "MySQL"]
  },
  {
    id: 6,
    title: "Sistema de Reservas Online",
    description: "Plataforma web de reservas online con calendario interactivo y notificaciones automáticas. Desarrollada con Node.js y MongoDB para gestión eficiente de datos y usuarios en tiempo real.",
    image: "/projects/project6.png",
    github: "https://github.com/LOAD-13/proyecto6",
    liveDemo: "",
    tags: ["Node.js", "MongoDB", "Express.js"]
  },
  {
    id: 7,
    title: "E-Commerce Moderno Full Stack",
    description: "Tienda online completa con carrito de compras, pasarela de pagos y panel administrativo. Construida con MERN stack, incluye autenticación de usuarios y gestión de inventario en tiempo real.",
    image: "/projects/project7.png",
    github: "https://github.com/LOAD-13/proyecto7",
    liveDemo: "",
    tags: ["React", "Node.js", "MongoDB", "Express.js"]
  },
  {
    id: 8,
    title: "App de Gestión de Tareas Colaborativa",
    description: "Aplicación multiplataforma enfocada en productividad, desarrollada con React y Supabase. Permite gestión de tareas colaborativas, sincronización en la nube y diseño limpio para equipos de trabajo.",
    image: "/projects/project8.png",
    github: "https://github.com/LOAD-13/proyecto8",
    liveDemo: "",
    tags: ["React", "Supabase", "TypeScript"]
  },
  {
    id: 9,
    title: "API REST de Gestión Financiera",
    description: "API backend escalable para gestión financiera personal con autenticación JWT y reportes detallados. Desarrollada con Spring Boot, PostgreSQL y documentación automática con Swagger para desarrolladores.",
    image: "/projects/project9.png",
    github: "https://github.com/LOAD-13/proyecto9",
    liveDemo: "",
    tags: ["Java", "Spring Boot", "PostgreSQL", "JWT"]
  },
  {
    id: 10,
    title: "Portal de Noticias con CMS",
    description: "Portal de noticias dinámico con sistema de gestión de contenido. Construido con Next.js y Strapi CMS, incluye categorías, búsqueda avanzada y panel de administración completo para editores.",
    image: "/projects/project10.png",
    github: "https://github.com/LOAD-13/proyecto10",
    liveDemo: "",
    tags: ["React", "Next.js", "Strapi", "PostgreSQL"]
  },
  {
    id: 11,
    title: "Sistema de Chat en Tiempo Real",
    description: "Aplicación de mensajería instantánea con salas de chat y notificaciones push. Desarrollada con Socket.io y Node.js, soporta mensajes multimedia y estado de conexión de usuarios en tiempo real.",
    image: "/projects/project11.png",
    github: "https://github.com/LOAD-13/proyecto11",
    liveDemo: "",
    tags: ["Node.js", "Socket.io", "MongoDB", "Express.js"]
  },
  {
    id: 12,
    title: "Plataforma de Cursos Online",
    description: "Sistema de gestión de aprendizaje con videos, quizzes y certificados. Construido con Django y PostgreSQL, incluye seguimiento de progreso, foros de discusión y panel para instructores y estudiantes.",
    image: "/projects/project12.png",
    github: "https://github.com/LOAD-13/proyecto12",
    liveDemo: "",
    tags: ["Python", "Django", "PostgreSQL"]
  },
  {
    id: 13,
    title: "App de Seguimiento de Fitness",
    description: "Aplicación móvil para seguimiento de ejercicios y nutrición. Desarrollada con React Native y Firebase, incluye gráficos de progreso, planes de entrenamiento personalizados y sincronización multi-dispositivo.",
    image: "/projects/project13.png",
    github: "https://github.com/LOAD-13/proyecto13",
    liveDemo: "",
    tags: ["React Native", "Firebase", "TypeScript"]
  },
  {
    id: 14,
    title: "Sistema de Gestión Hospitalaria",
    description: "Plataforma web para gestión de citas médicas, historiales clínicos y recetas electrónicas. Desarrollada con Angular y Spring Boot, cumple con estándares de seguridad y privacidad de datos médicos.",
    image: "/projects/project14.png",
    github: "https://github.com/LOAD-13/proyecto14",
    liveDemo: "",
    tags: ["Angular", "Spring Boot", "MySQL", "JWT"]
  },
  {
    id: 15,
    title: "Dashboard de IoT Smart Home",
    description: "Panel de control para dispositivos inteligentes del hogar con automatizaciones programables. Construido con Vue.js y MQTT, permite monitoreo y control remoto de sensores y actuadores IoT.",
    image: "/projects/project15.png",
    github: "https://github.com/LOAD-13/proyecto15",
    liveDemo: "",
    tags: ["Vue.js", "Node.js", "MQTT", "MongoDB"]
  },
  {
    id: 16,
    title: "Generador de Portfolios con IA",
    description: "Herramienta web que genera portfolios personalizados usando inteligencia artificial. Desarrollada con Astro y OpenAI API, crea diseños únicos, optimizados y exportables a múltiples formatos web.",
    image: "/projects/project16.png",
    github: "https://github.com/LOAD-13/proyecto16",
    liveDemo: "",
    tags: ["Astro", "OpenAI", "TypeScript", "Tailwind CSS"]
  }
];

// Colores para los tags de tecnologías
const tagColors: Record<string, string> = {
  "React": "bg-blue-500/20 text-blue-400 border-blue-500/30",
  "Node.js": "bg-green-500/20 text-green-400 border-green-500/30",
  "MongoDB": "bg-emerald-500/20 text-emerald-400 border-emerald-500/30",
  "Express.js": "bg-gray-500/20 text-gray-400 border-gray-500/30",
  "Astro": "bg-orange-500/20 text-orange-400 border-orange-500/30",
  "Tailwind CSS": "bg-cyan-500/20 text-cyan-400 border-cyan-500/30",
  "TypeScript": "bg-blue-600/20 text-blue-500 border-blue-600/30",
  "Spring Boot": "bg-lime-500/20 text-lime-400 border-lime-500/30",
  "PostgreSQL": "bg-indigo-500/20 text-indigo-400 border-indigo-500/30",
  "Java": "bg-red-500/20 text-red-400 border-red-500/30",
  "Python": "bg-yellow-500/20 text-yellow-400 border-yellow-500/30",
  "MySQL": "bg-sky-500/20 text-sky-400 border-sky-500/30",
  "Supabase": "bg-emerald-600/20 text-emerald-500 border-emerald-600/30",
  "FastAPI": "bg-teal-500/20 text-teal-400 border-teal-500/30",
  "DeepFace": "bg-purple-500/20 text-purple-400 border-purple-500/30",
  "Docker": "bg-blue-400/20 text-blue-300 border-blue-400/30",
  "JWT": "bg-violet-500/20 text-violet-400 border-violet-500/30",
  "Swagger": "bg-green-600/20 text-green-400 border-green-600/30",
  "Vite": "bg-purple-600/20 text-purple-300 border-purple-600/30",
  "Gemini AI": "bg-fuchsia-500/20 text-fuchsia-400 border-fuchsia-500/30",
  "Next.js": "bg-slate-500/20 text-slate-300 border-slate-500/30",
  "Strapi": "bg-violet-600/20 text-violet-300 border-violet-600/30",
  "Socket.io": "bg-zinc-500/20 text-zinc-300 border-zinc-500/30",
  "Django": "bg-green-700/20 text-green-300 border-green-700/30",
  "React Native": "bg-sky-600/20 text-sky-300 border-sky-600/30",
  "Firebase": "bg-amber-500/20 text-amber-300 border-amber-500/30",
  "Angular": "bg-red-600/20 text-red-300 border-red-600/30",
  "Vue.js": "bg-emerald-400/20 text-emerald-300 border-emerald-400/30",
  "MQTT": "bg-purple-700/20 text-purple-300 border-purple-700/30",
  "OpenAI": "bg-teal-600/20 text-teal-300 border-teal-600/30"
};
---

<section id="proyectos" class="relative min-h-screen py-20 px-6 overflow-hidden">
  
  <div class="container mx-auto max-w-7xl">
    
    <!-- Título -->
    <div class="text-center mb-12 animate-fade-in-down">
      <h2 class="text-5xl md:text-6xl font-bold text-white">
        <span data-i18n="projects.titulo">Proyectos</span>
      </h2>
    </div>

    <!-- Contenedor Principal con Borde Azul -->
    <div class="projects-container bg-[#0f172a]/60 backdrop-blur-xl border border-cyan-400/30 rounded-3xl p-6 md:p-8 shadow-md shadow-cyan-500/10">
      
      <!-- Header: Filtros y Vista -->
      <div class="flex items-center justify-between mb-8">
        
        <!-- Menú Hamburguesa (Filtros) - Con menú desplegable -->
        <div class="relative">
          <button id="filter-btn" class="flex items-center gap-2 px-4 py-2 bg-gray-800/70 hover:bg-sky-500/30 rounded-lg transition-all duration-300 border border-gray-700 hover:border-sky-500">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
            <span class="text-sm text-white font-medium hidden sm:inline"><span data-i18n="projects.todo">Todo</span></span>
          </button>

          <!-- Menú Desplegable -->
          <div id="filter-menu" class="absolute top-full left-0 mt-2 hidden opacity-0 transform -translate-y-2 transition-all duration-300 z-20">
            <div class="bg-gray-800/95 backdrop-blur-lg rounded-lg border border-sky-500/30 shadow-2xl shadow-sky-500/20 p-4 min-w-[250px]">
              <p class="text-white text-sm mb-3 font-medium"><span data-i18n="projects.filtrar">Filtrar por tecnología:</span></p>
              <div class="flex flex-wrap gap-2">
                <button class="filter-tag px-3 py-1 rounded-full text-xs font-medium bg-sky-500 text-white border border-sky-500 hover:scale-105 transition-transform" data-tag="Todos">
                  <span data-i18n="projects.todos">Todos</span>
                </button>
                {Array.from(new Set(projects.flatMap(p => p.tags))).map(tag => (
                  <button data-tag={tag} class={`filter-tag px-3 py-1 rounded-full text-xs font-medium border hover:scale-105 transition-transform ${tagColors[tag] || 'bg-gray-500/20 text-gray-400 border-gray-500/30'}`}>
                    {tag}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        <!-- Selector de Vista -->
        <div class="flex items-center gap-2 bg-gray-800/70 rounded-lg p-1 border border-gray-700">
          <button data-view="1" class="view-btn active p-2 rounded hover:bg-sky-500/30 transition-all duration-300">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <rect x="3" y="3" width="18" height="18" rx="2"></rect>
            </svg>
          </button>
          <button data-view="2" class="view-btn p-2 rounded hover:bg-sky-500/30 transition-all duration-300">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <rect x="3" y="3" width="8" height="18" rx="2"></rect>
              <rect x="13" y="3" width="8" height="18" rx="2"></rect>
            </svg>
          </button>
          <button data-view="3" class="view-btn p-2 rounded hover:bg-sky-500/30 transition-all duration-300">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <rect x="3" y="3" width="5" height="18" rx="1"></rect>
              <rect x="10" y="3" width="5" height="18" rx="1"></rect>
              <rect x="17" y="3" width="5" height="18" rx="1"></rect>
            </svg>
          </button>
        </div>
      </div>

      <!-- Grid de Proyectos -->
      <div id="projects-grid" class="grid grid-cols-1 gap-6 view-3 mb-8">
        
        {projects.map((project) => (
          <div class="project-card bg-gradient-to-br from-gray-800/90 to-gray-900/90 backdrop-blur-sm rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl hover:shadow-sky-500/20 transition-all duration-300 hover:scale-[1.02] border border-gray-700/50" data-tags={project.tags.join(',')}>
            
            <div class="p-6">
              <!-- Título del Proyecto -->
              <h3 class="text-xl font-bold text-white mb-3 min-h-[3.5rem] flex items-center" data-i18n={`projects.proyecto${project.id - 1}.titulo`}>
                {project.title}
              </h3>

              <!-- Descripción -->
              <p class="text-gray-300 text-sm mb-4 leading-relaxed" data-i18n={`projects.proyecto${project.id - 1}.descripcion`}>
                {project.description}
              </p>

              <!-- Imagen del Proyecto -->
              <div class="w-full h-48 bg-gray-800 rounded-xl mb-4 overflow-hidden">
                <img 
                  src={project.image} 
                  alt={project.title}
                  class="w-full h-full object-cover"
                  onerror="this.style.display='none'"
                />
              </div>

              <!-- Botones de Acción -->
              <div class="flex flex-wrap gap-3 mb-4">
                <!-- Botón GitHub -->
                <a 
                  href={project.github}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="inline-flex items-center gap-2 px-4 py-2 bg-gray-700/70 hover:bg-sky-600 text-white rounded-lg transition-all duration-300 group border border-gray-600 hover:border-sky-500"
                >
                  <img src="/github.svg" alt="GitHub" class="w-5 h-5 group-hover:scale-110 transition-transform" />
                  <span class="text-sm font-medium"><span data-i18n="projects.verCodigo">Ver Código</span></span>
                </a>

                <!-- Botón Live Demo (solo si existe URL) -->
                {project.liveDemo && (
                  <a 
                    href={project.liveDemo}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-flex items-center gap-2 px-4 py-2 bg-cyan-600/70 hover:bg-cyan-500 text-white rounded-lg transition-all duration-300 group border border-cyan-500/50 hover:border-cyan-400"
                  >
                    <img src="/live-demo.svg" alt="Live Demo" class="w-5 h-5 group-hover:scale-110 transition-transform" />
                    <span class="text-sm font-medium"><span data-i18n="projects.liveDemo">Live Demo</span></span>
                  </a>
                )}
              </div>

              <!-- Tags de Tecnologías -->
              <div class="flex flex-wrap gap-2">
                {project.tags.map(tag => (
                  <span class={`px-3 py-1 rounded-full text-xs font-medium border ${tagColors[tag] || 'bg-gray-500/20 text-gray-400 border-gray-500/30'}`}>
                    {tag}
                  </span>
                ))}
              </div>
            </div>

          </div>
        ))}

      </div>

      <!-- Controles de Paginación -->
      <div id="pagination-controls" class="flex items-center justify-center gap-2 mt-8">
        <!-- Se generan dinámicamente con JavaScript -->
      </div>

    </div>

  </div>
</section>

<script>
  // ==================== PAGINACIÓN ====================
  const ITEMS_PER_PAGE = 6;
  let currentPage = 1;
  let totalPages = 1;
  let filteredCards: Element[] = [];

  const projectsGrid = document.getElementById('projects-grid');
  const paginationControls = document.getElementById('pagination-controls');
  const projectCards = Array.from(document.querySelectorAll('.project-card'));

  // Función para calcular total de páginas
  function calculateTotalPages() {
    const visibleCards = projectCards.filter(card => 
      (card as HTMLElement).style.display !== 'none'
    );
    filteredCards = visibleCards;
    totalPages = Math.ceil(visibleCards.length / ITEMS_PER_PAGE);
    return totalPages;
  }

  // Función para mostrar proyectos de la página actual
  function showPage(page: number) {
    currentPage = page;
    
    // Ocultar todos los proyectos primero
    filteredCards.forEach(card => {
      (card as HTMLElement).style.display = 'none';
    });

    // Calcular índices de inicio y fin
    const startIndex = (page - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;

    // Mostrar solo los proyectos de la página actual
    filteredCards.slice(startIndex, endIndex).forEach(card => {
      (card as HTMLElement).style.display = 'block';
    });

    // Actualizar controles de paginación
    renderPaginationControls();

    // Scroll suave hacia arriba
    projectsGrid?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  }

  // Función para renderizar los controles de paginación
  function renderPaginationControls() {
    if (!paginationControls) return;
    
    paginationControls.innerHTML = '';

    if (totalPages <= 1) return;

    // Botón Anterior
    const prevBtn = document.createElement('button');
    prevBtn.innerHTML = `
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    `;
    prevBtn.className = `px-3 py-2 rounded-lg border transition-all duration-300 ${
      currentPage === 1 
        ? 'bg-gray-800/50 text-gray-500 border-gray-700 cursor-not-allowed' 
        : 'bg-gray-800/70 text-white border-gray-600 hover:bg-sky-600 hover:border-sky-500'
    }`;
    prevBtn.disabled = currentPage === 1;
    prevBtn.onclick = () => {
      if (currentPage > 1) showPage(currentPage - 1);
    };
    paginationControls.appendChild(prevBtn);

    // Números de página
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

    if (endPage - startPage < maxVisiblePages - 1) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }

    // Primera página si no está visible
    if (startPage > 1) {
      const firstBtn = createPageButton(1);
      paginationControls.appendChild(firstBtn);
      
      if (startPage > 2) {
        const dots = document.createElement('span');
        dots.textContent = '...';
        dots.className = 'px-3 py-2 text-gray-400';
        paginationControls.appendChild(dots);
      }
    }

    // Páginas visibles
    for (let i = startPage; i <= endPage; i++) {
      const pageBtn = createPageButton(i);
      paginationControls.appendChild(pageBtn);
    }

    // Última página si no está visible
    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        const dots = document.createElement('span');
        dots.textContent = '...';
        dots.className = 'px-3 py-2 text-gray-400';
        paginationControls.appendChild(dots);
      }
      
      const lastBtn = createPageButton(totalPages);
      paginationControls.appendChild(lastBtn);
    }

    // Botón Siguiente
    const nextBtn = document.createElement('button');
    nextBtn.innerHTML = `
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    `;
    nextBtn.className = `px-3 py-2 rounded-lg border transition-all duration-300 ${
      currentPage === totalPages 
        ? 'bg-gray-800/50 text-gray-500 border-gray-700 cursor-not-allowed' 
        : 'bg-gray-800/70 text-white border-gray-600 hover:bg-sky-600 hover:border-sky-500'
    }`;
    nextBtn.disabled = currentPage === totalPages;
    nextBtn.onclick = () => {
      if (currentPage < totalPages) showPage(currentPage + 1);
    };
    paginationControls.appendChild(nextBtn);
  }

  // Función auxiliar para crear botones de página
  function createPageButton(pageNum: number): HTMLButtonElement {
    const btn = document.createElement('button');
    btn.textContent = pageNum.toString();
    btn.className = `px-4 py-2 rounded-lg border transition-all duration-300 ${
      pageNum === currentPage
        ? 'bg-sky-600 text-white border-sky-500 font-bold'
        : 'bg-gray-800/70 text-white border-gray-600 hover:bg-sky-600/50 hover:border-sky-500'
    }`;
    btn.onclick = () => showPage(pageNum);
    return btn;
  }

  // ==================== FILTROS ====================
  const filterBtn = document.getElementById('filter-btn');
  const filterMenu = document.getElementById('filter-menu');
  let isFilterOpen = false;

  filterBtn?.addEventListener('click', () => {
    isFilterOpen = !isFilterOpen;
    
    if (isFilterOpen) {
      filterMenu?.classList.remove('hidden');
      setTimeout(() => {
        filterMenu?.classList.remove('opacity-0', '-translate-y-2');
        filterMenu?.classList.add('opacity-100', 'translate-y-0');
      }, 10);
    } else {
      filterMenu?.classList.remove('opacity-100', 'translate-y-0');
      filterMenu?.classList.add('opacity-0', '-translate-y-2');
      setTimeout(() => {
        filterMenu?.classList.add('hidden');
      }, 300);
    }
  });

  // Cerrar menú al hacer clic fuera
  document.addEventListener('click', (e) => {
    if (!filterBtn?.contains(e.target as Node) && !filterMenu?.contains(e.target as Node)) {
      if (isFilterOpen) {
        filterMenu?.classList.remove('opacity-100', 'translate-y-0');
        filterMenu?.classList.add('opacity-0', '-translate-y-2');
        setTimeout(() => {
          filterMenu?.classList.add('hidden');
        }, 300);
        isFilterOpen = false;
      }
    }
  });

  // Sistema de filtrado por tags
  const filterTags = document.querySelectorAll('.filter-tag');

  filterTags.forEach(tag => {
    tag.addEventListener('click', () => {
      // Actualizar botón activo
      filterTags.forEach(t => {
        t.classList.remove('bg-sky-500', 'text-white');
      });
      
      tag.classList.add('bg-sky-500', 'text-white', 'border-sky-500');

      const selectedTag = (tag as HTMLElement).dataset.tag;

      // Filtrar proyectos
      projectCards.forEach(card => {
        const cardTags = (card as HTMLElement).dataset.tags?.split(',') || [];
        
        if (selectedTag === 'Todos' || cardTags.includes(selectedTag || '')) {
          (card as HTMLElement).style.display = 'block';
        } else {
          (card as HTMLElement).style.display = 'none';
        }
      });

      // Recalcular paginación después de filtrar
      calculateTotalPages();
      currentPage = 1;
      showPage(1);
    });
  });

  // ==================== CAMBIO DE VISTA ====================
  const viewBtns = document.querySelectorAll('.view-btn');

  viewBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      viewBtns.forEach(b => b.classList.remove('active', 'bg-sky-500/50'));
      btn.classList.add('active', 'bg-sky-500/50');

      const view = btn.getAttribute('data-view');
      projectsGrid?.classList.remove('view-1', 'view-2', 'view-3');
      projectsGrid?.classList.add(`view-${view}`);
    });
  });

  // ==================== INICIALIZACIÓN ====================
  calculateTotalPages();
  showPage(1);
</script>

<style>
  @import "tailwindcss";
  
  /* Vistas responsivas */
  .view-1 {
    @apply grid-cols-1;
  }

  .view-2 {
    @apply grid-cols-1 md:grid-cols-2;
  }

  .view-3 {
    @apply grid-cols-1 md:grid-cols-2 lg:grid-cols-3;
  }

  /* Botón de vista activo */
  .view-btn.active {
    @apply bg-sky-500/50;
  }

  /* Animación fade-in-down */
  @keyframes fade-in-down {
    from {
      opacity: 0;
      transform: translateY(-30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-down {
    animation: fade-in-down 0.8s ease-out;
  }

  /* Asegurar que los controles de paginación sean responsivos */
  #pagination-controls {
    @apply flex-wrap;
  }
</style>
